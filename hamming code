import java.util.Scanner;
public class hammingCode {
    // Method to generate Hamming code
    public static String generateHammingCode(String data) {
        int r = 1;
        while (Math.pow(2, r) < data.length() + r + 1) {
            r++;
        }
        StringBuilder hammingCode = new StringBuilder();
        int j = 0;
        for (int i = 1; i <= data.length() + r; i++) {
            if (Math.pow(2, j) == i) {
                hammingCode.append('0');
                j++;
            } else {
                hammingCode.append(data.charAt(i - j - 1));
            }
        }
        for (int i = 0; i < r; i++) {
            int parity = 0;
            for (int k = (int) Math.pow(2, i) - 1; k < hammingCode.length(); k += (int) Math.pow(2, i + 1)) {
                for (int l = k; l < k + Math.pow(2, i) && l < hammingCode.length(); l++) {
                    if (hammingCode.charAt(l) == '1') {
                        parity = (parity + 1) % 2;
                    }
                }
            }
            hammingCode.setCharAt((int) Math.pow(2, i) - 1, (char) (parity + '0'));
        }
        return hammingCode.toString();
    }
    // Method to detect and correct errors in Hamming code
    public static String detectAndCorrectErrors(String hammingCode) {
        int r = 1;
        while (Math.pow(2, r) < hammingCode.length() + 1) {
            r++;
        }
        StringBuilder correctedCode = new StringBuilder(hammingCode);
        int errorBit = 0;
        for (int i = 0; i < r; i++) {
            int parity = 0;
            for (int k = (int) Math.pow(2, i) - 1; k < hammingCode.length(); k += (int) Math.pow(2, i + 1)) {
                for (int l = k; l < k + Math.pow(2, i) && l < hammingCode.length(); l++) {
                    if (hammingCode.charAt(l) == '1') {
                        parity = (parity + 1) % 2;
                    }
                }
            }
            if (parity != 0) {
                errorBit += (int) Math.pow(2, i);
            }
        }
        if (errorBit != 0) {
            correctedCode.setCharAt(errorBit - 1, (char) ((correctedCode.charAt(errorBit - 1) + 1) % 2 + '0'));
        }
        return correctedCode.toString();
    }
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter 7-bit ASCII code: ");
        String data = scanner.nextLine();
        String hammingCode = generateHammingCode(data);
        System.out.println("Generated Hamming code: " + hammingCode);
        System.out.print("Enter received Hamming code: ");
        String receivedCode = scanner.nextLine();
        String correctedCode = detectAndCorrectErrors(receivedCode);
        System.out.println("Corrected Hamming code: " + correctedCode);
        scanner.close();
    }
}
